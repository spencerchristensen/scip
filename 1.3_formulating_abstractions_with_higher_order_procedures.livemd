<!-- livebook:{"file_entries":[{"name":"fib.svg","type":"attachment"}]} -->

# SCIP 1.3 Formulating Abstractions with Higher-Order Procedures

```elixir
Mix.install([])
```

## 1.3

**Higher Order Procedure**: a procedure that manipulates a procedure.

## 1.3.1 Procedures as Arguments

When you observe muliple procedures share the same pattern or structure it is indicative of a useful abstraction waiting to be brought to the surface. In such a case, you would map out the common structure and then pass the actual computation as an argument. This is not a new concept as mathematicians have identified such abstractions for centuries, e.g. sigma notation and "summation of a series".

## 1.3.2 Constructing Procedures Using Lambda

It would be cumbersome to define a named abstraction for trivial operations only so that they could be passed as arguments. Programming languages will provide a `lambda`.

`lambda` definitions are used to create procedures with no name.

```elixir
multiply = fn a, b -> a * b end
multiply.(5, 5)
```

```elixir
perform_operation = fn operation, a, b -> operation.(a, b) end
perform_operation.(multiply, 5, 5)
```

We will often need local variables in our procedures other than those bound as formal parameters.

Let's say we wanted to compute:

$f(x, y) = x(1 + xy)^2 + y(1 - y) + (1 + xy)(1-y)$

That's confusing! It could be simplified as:

$a = 1 + xy$

$b = 1 - y$

$f(x, y) = xa^2 + yb + ab$

If we were simply using functions, we could use `lambda` functions to facilitate this local binding.

```elixir
f = fn x, y ->
  (fn a, b ->
     x * (a * a) + y * b + a * b
   end).(1 + x * y, 1 - y)
end

f.(3, 4)
```

That's not very readable! We are using an anonymous function to capture `(a, b)` as local parameters. Scheme has a `let` special form that allows you do define local parameters. (Fun fact: the `let` special form is in fact syntactic sugar for the underlying `lambda` application).

Elixir has function level scope, allowing for the above to be refactored:

```elixir
f = fn x, y ->
  a = 1 + x * y
  b = 1 - y
  x * (a * a) + y * b + a * b
end

f.(3, 4)
```

## 1.3.3 Procedures as General Methods

The above are instances where we are using procedures to express general methods of computation *independent of the particular functions involved*. Let's dive into concrete applications of this new knowledge.

<!-- livebook:{"break_markdown":true} -->

A number `x` is called a *fixed point* of a function `f` if `x` satisfies the equation `f(x) = x`. For some functions `f` we can locate a fixed point by applying `f` repeatedly: `f(x), f(f(x)), f(f(f(x)))...`

```elixir
tolerance = 0.00001

fixed_point = fn f, first_guess ->
  close_enough? = fn v1, v2 ->
    abs(v1 - v2) < tolerance
  end

  try_guess = fn guess, recur ->
    next = f.(guess)
    IO.puts(guess)

    if close_enough?.(guess, next) do
      next
    else
      recur.(next, recur)
    end
  end

  try_guess.(first_guess, try_guess)
end

fixed_point.(fn x -> :math.cos(x) end, 1.0)
```

We can now use `fixed_point` in cases where we are searching for an answer using iteratively improved guesses.

```elixir
sqrt = fn x ->
  fixed_point.(fn y -> x / y end, 1.0)
end

# 36.0
# 1.0
# 36.0
# 1.0
# 36.0
# 1.0
# 36.0
# 1.0
# etc
```

Unfortunately this never converges, with the large oscillations in guesses causing an infinite loop. We can control this by preventing the guesses from changing so much. We can use **Average Damping** to average successive approximations toward a solution. Instead of iterating over `x / y`, we can make a new guess by averaging `y` with `x / y` so as to locate something that is not as far from `y` as `x / y`.

```elixir
average = fn x, y ->
  (x + y) / 2
end

sqrt = fn x ->
  fixed_point.(fn y -> average.(y, x / y) end, 1.0)
end

sqrt.(36)
```

## 1.3.4 Procedures as Returned Values

Just as the ability to pass procedures as arguments increases a language's expressiveness, so does the ability to return procedures.

As a programmer one should always be on the look out for abstractions *appropriate to the task*.

Programming languages will impose limits on the ways in which computation elements can be manipulated. Elements with the fewest restrictions are said to be **First-Class**.

First-class elements can be:

* named by variables
* passed as arguments to procedures
* returned as results of procedures
* included in data structures

<!-- livebook:{"break_markdown":true} -->

Returning to average damping, we can extract that logic into its own named procedure. Let's make a procedure that:

* takes as its argument a procedure `f`
* returns as its value a procedure that 
  * takes as its argument the value `x`
  * produces an average of `x` and `f(x)`.

```elixir
average_damp = fn f ->
  fn x -> average.(x, f.(x)) end
end

average_damp.(sqrt).(36)
```

We can now refactor the `sqrt` procedure to use the `average_damp` procedure.

```elixir
sqrt = fn x ->
  fixed_point.(average_damp.(fn y -> x / y end), 1.0)
end

sqrt.(36)
```

We can then abstract this further by observing that the method begins with a function and finds a fixed point of some transformation of the function. This very general procedure:

* takes as its arguments a procedure `g`, a procedure that transforms `g`, and an initial guess
* returns a fixed point of the transofmred function

```elixir
fixed_point_of_transform = fn g, transform, guess ->
  fixed_point.(transform.(g), guess)
end

sqrt = fn x ->
  fixed_point_of_transform.(fn y -> x / y end, average_damp, 1.0)
end

sqrt.(36)
```

## Exercises

### Exercise 1.41

> Define a procedure `double` that takes a procedure of one argument as argument and returns a procedure that applies the original procedure twice.

Let's first achieve this with a lambda. I will then solve this using modules, one with a Linear Recursive Process and another with a Linear Iterative Process.

```elixir
inc = fn x ->
  x + 1
end

double = fn f ->
  fn x ->
    x
    |> f.()
    |> f.()
  end
end

IO.puts(double.(inc).(5))
IO.puts(double.(double.(double)).(inc).(5))
```

```elixir
defmodule LinearRecursiveDouble do
  def double(fun) do
    fn x -> apply_n_times(fun, 2, x) end
  end

  defp apply_n_times(_fun, 0, x) do
    x
  end

  defp apply_n_times(fun, n, x) do
    fun.(apply_n_times(fun, n - 1, x))
  end
end

defmodule LinearIterativeDouble do
  def double(fun) do
    fn x -> apply_n_times(fun, 2, x) end
  end

  defp apply_n_times(_fun, 0, x) do
    x
  end

  defp apply_n_times(fun, n, x) do
    apply_n_times(fun, n - 1, fun.(x))
  end
end

IO.puts(LinearRecursiveDouble.double(inc).(5))
IO.puts(LinearIterativeDouble.double(inc).(5))
```

### Exercise 1.42

> Let $f$ and $g$ be two one-argument functions. The composition $f$ after $g$ is defined to be the function ${x\mapsto f(g(x))}$. Define a procedure compose that implements composition.

```elixir
square = fn x -> x * x end

compose = fn f1, f2 ->
  fn x ->
    # f1.(f2.(x))
    x
    |> f2.()
    |> f1.()
  end
end

IO.puts(compose.(square, inc).(6))
```

### Exercise 1.43

> If $f$ is a numerical function and $n$ is a positive integer, then we can form the $n^{\text{th}}$ repeated application of $f$, which is defined to be the function whose value at $x$ is ${f(f(\dots(f(x))\dots))}$. For example, if $f$ is the function ${x\mapsto x+1}$, then the $n^{\text{th}}$ repeated application of f is the function ${x\mapsto x+n}$. Write a procedure that takes as inputs a procedure that computes $f$ and a positive integer $n$ and returns the procedure that computes the $n^{\text{th}}$ repeated application of f.

Let's first solve this using linear recursive/iterative processes as I did above, but then add another variant that uses the `compose` logic.

```elixir
defmodule LinearRecursiveRepeat do
  def repeat(fun, n) do
    fn x ->
      apply_n_times(fun, n, x)
    end
  end

  def apply_n_times(_fun, 0, x) do
    x
  end

  def apply_n_times(fun, n, x) do
    fun.(apply_n_times(fun, n - 1, x))
  end
end

defmodule LinearIterativeRepeat do
  def repeat(fun, n) do
    fn x ->
      apply_n_times(fun, n, x)
    end
  end

  def apply_n_times(_fun, 0, x) do
    x
  end

  def apply_n_times(fun, n, x) do
    apply_n_times(fun, n - 1, fun.(x))
  end
end

defmodule ComposedRepetition do
  def compose(f1, f2) do
    fn x ->
      x
      |> f2.()
      |> f1.()
    end
  end

  def repeat(f, n) when n > 0 do
    Enum.reduce(1..n, fn x -> x end, fn _, acc -> compose(acc, f) end)
  end
end

IO.puts(LinearRecursiveRepeat.repeat(inc, 5).(5))
IO.puts(LinearIterativeRepeat.repeat(inc, 5).(5))
IO.puts(ComposedRepetition.repeat(inc, 5).(5))
```
