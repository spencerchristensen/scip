# SCIP 2.2 Hierarchical Data and the Closure Property

```elixir
Mix.install([])
```

## 2.2 Hierarchical Data and the Closure Property

Pairs provide a primitive "glue" that we can use to construct compound data structures. We can visualize this using *box-and-pointer notation*.

<!-- livebook:{"break_markdown":true} -->

<!-- Learn more at https://mermaid-js.github.io/mermaid -->

```mermaid
graph TD;
  pair_a-->pair_b;
  pair_a-->1;
  pair_b-->pair_c;
  pair_b-->2;
  pair_c-->3
  pair_c-->4
```

However we will note that pairs can not just contain primitives like numbers or strings, but also other pairs. This allows us to build up complex data structures from simple parts. The ability to create pairs whose elements are pairs is the essence of the list structure's importance as a representational tool and is referred to as the *closure property*.

**Closure Property**: an operation that combines data objects if the result of the combination can themselves be combined using the same operation.

## 2.2.1 Representing Sequences

One of the useful structures we can build with pairs is a *sequence*.

**Sequence**: an ordered collection of data objects.

A straightforward representation could be:

```scheme
(cons 1
  (cons 2 
    (cons 3
      cons 4 nil)))
```

A sequce of pairs, formed by nested `cons` calls, is called a *list*.

**List**: a sequence of pairs.

Scheme provides a primitive for constructing lists, where the above could be represented as:

```scheme
(list 1 2 3 4)
```

The above would print to  `(1 2 3 4)`, but note that this is a convenience and is not representative of the actual data structure.

Since a list is a list of pairs, many list operations can be programmed as recursive procedures:

```scheme
(define (list-ref items n)
  (if (= n 0)
    (car items)
    (list-ref (cdr items) (- n 1))))

(define (length items)
  (if (null? items)
    0
    (+ 1 (length (cdr items)))))
```

Another common technique is to "`cons` up" an answer list while `cdr`ing down a list (construct up, tails down):

```scheme
(define (append list1 list2)
  if (null? list1)
    list 2
    (cons (car list1) (append (cdr list1) list2)))
```

which would result the following execution:

```scheme
(append (list 1 2 3) (list 4 5 6))
  (cons (car (list 1 2 3)) (append (cdr (list 1 2 3)) (list 4 5 6)))
    (cons 1 (append (cdr (list 1 2 3)) (list 4 5 6)))
      (cons 1 (append (list 2 3) (list 4 5 6)))
        (cons (car (list 2 3)) (append (cdr (list 2 3)) (list 4 5 6)))
          (cons 2 (append (cdr (list 2 3)) (list 4 5 6)))
            (cons 2 (append (list 3) (list 4 5 6)))
              (cons (car (list 3)) (append (cdr (list 3)) (list 4 5 6)))
                (cons 3 (append (cdr (list 3)) (list 4 5 6)))
                  (cons 3 (append () (list 4 5 6)))
                    (cons 3 (list 4 5 6))
                  (3 4 5 6)
                (cons 2 (3 4 5 6))
              (2 3 4 5 6)
            (cons 1 (2 3 4 5 6))
          (1 2 3 4 5 6)

```

One of the most common operations is to apply a transformation to each element in a list and then generate a list of results. This higher order procedure is called a **map**.

```scheme
(define (map proc items)
  (if (null? items)
    nil
    (cons (proc (car items))
      (map proc (cdr items)))))
```

```elixir
defmodule EnumMap do
  def map(_proc, []), do: []

  def map(proc, [head | tail]) do
    [proc.(head) | map(proc, tail)]
  end
end

EnumMap.map(fn x -> x + 1 end, [1, 2, 3, 4])
```

You could write a procedure that applies map logic itself or calls `map` under the hood. In either case, the difference is not the computer applying a different process. It is applying the same process. However, it makes us *think* about the process differently. `map` establishes an abstraction barrier that isolates the implementation of procedures that transform lists from the details of how the elements of the list are extracted and combined.

## Exercises

### Exercise 2.17

> Define a procedure `last-pair` that returns the list that contains only the last element of a given (nonempty) list:
> `(last-paid (list 23 72 149 34))`
> 
> *(34)*

<!-- livebook:{"break_markdown":true} -->

Lambda solution:

```elixir
last_pair = fn list, f ->
  case list do
    [head | []] -> [head]
    [_ | tail] -> f.(tail, f)
  end
end

IO.inspect(last_pair.([23, 72, 149, 34], last_pair), charlists: :as_lists)
```

Module solution:

```elixir
defmodule LastPair do
  def last_pair([head | []]) do
    [head]
  end

  def last_pair([_ | tail]) do
    last_pair(tail)
  end
end

IO.inspect(LastPair.last_pair([23, 72, 149, 34]), charlists: :as_lists)
```

### Exercise 2.18

> Define a procedure `reverse` that takes a list as argument and returns a list of the same elements in reverse order.

<!-- livebook:{"break_markdown":true} -->

One thing to note up front. Since the order of the list is different than the original list, I will need to add an accumulator to track my new list so that it can be used in list operations. Otherwise I would need to append lists which is less ideal.

Lambda solution:

```elixir
reverse = fn list, f ->
  case list do
    [head | []] -> [head]
    # appending!
    [head | tail] -> f.(tail, f) ++ [head]
  end
end

reverse.([1, 2, 3, 4, 5], reverse)
```

```elixir
reverse_acc = fn list, acc, f ->
  case list do
    [] -> acc
    # no appending!
    [head | tail] -> f.(tail, [head | acc], f)
  end
end

reverse_acc.([1, 2, 3, 4, 5], [], reverse_acc)
```

Module solution:

```elixir
defmodule ReverseWithAppending do
  def reverse([]), do: []

  def reverse([head | tail]) do
    reverse(tail) ++ [head]
  end
end

ReverseWithAppending.reverse([1, 2, 3, 4, 5])
```

The above works, but results in the following process:

```
Initial list: [1, 2, 3, 4, 5]

Step 1: reverse([2, 3, 4, 5]) ++ [1]
Step 2: (reverse([3, 4, 5]) ++ [2]) ++ [1]
Step 3: ((reverse([4, 5]) ++ [3]) ++ [2]) ++ [1]
Step 4: (((reverse([5]) ++ [4]) ++ [3]) ++ [2]) ++ [1]
Step 5: ((((reverse([]) ++ [5]) ++ [4]) ++ [3]) ++ [2]) ++ [1]
Step 6: ((([5] ++ [4]) ++ [3]) ++ [2]) ++ [1]
Step 7: (([5, 4] ++ [3]) ++ [2]) ++ [1]
Step 8: ([5, 4, 3] ++ [2]) ++ [1]
Step 9: [5, 4, 3, 2] ++ [1]
Step 10: [5, 4, 3, 2, 1]

Final list: [5, 4, 3, 2, 1]
```

```elixir
defmodule ReverseWithAccumulator do
  def reverse(list), do: do_reverse(list, [])

  defp do_reverse([], acc), do: acc

  defp do_reverse([head | tail], acc) do
    do_reverse(tail, [head | acc])
  end
end

ReverseWithAccumulator.reverse([1, 2, 3, 4, 5])
```

The accumulator allows for the operation to be achieved on a single pass:

```
Initial list: [1, 2, 3, 4, 5]
Accumulator: []

Step 1: do_reverse([2, 3, 4, 5], [1])
Step 2: do_reverse([3, 4, 5], [2, 1])
Step 3: do_reverse([4, 5], [3, 2, 1])
Step 4: do_reverse([5], [4, 3, 2, 1])
Step 5: do_reverse([], [5, 4, 3, 2, 1])

Final list: [5, 4, 3, 2, 1]
```

<!-- livebook:{"break_markdown":true} -->

### Exercise 2.20

> Use dot notation to write a procedure `same-parity` that takes one or more integers and returns a list of all the arguments that have the same even-odd parity as the first argument.

<!-- livebook:{"break_markdown":true} -->

Elixir does not have variadic functions, making this a little different.

Lambda solution:

```elixir
require Integer

same_parity = fn [head | tail] ->
  parity_fn = if Integer.is_even(head), do: &Integer.is_even/1, else: &Integer.is_odd/1
  [head | Enum.filter(tail, parity_fn)]
end

same_parity.([1, 2, 3, 4, 5, 6, 7])
```

Module solution:

```elixir
defmodule Parity do
  def same_parity([head | tail]) when Integer.is_even(head) do
    [head | Enum.filter(tail, &Integer.is_even/1)]
  end

  def same_parity([head | tail]) when Integer.is_odd(head) do
    [head | Enum.filter(tail, &Integer.is_odd/1)]
  end
end

Parity.same_parity([1, 2, 3, 4, 5, 6, 7])
```

### Exercise 2.21

> The procedure square-list takes a list of numbers as argument and returns a list of the squares of those numbers.
> 
> ```scheme
> (square-list (list 1 2 3 4))
> (1 4 9 16)
> ```
> 
> Here are two different definitions of square-list. Complete both of them by filling in the missing expressions:
> 
> ```scheme
> (define (square-list items) (if (null? items) nil (cons ⟨??⟩ ⟨??⟩)))
> ```
> 
> &
> 
> ```scheme
> (define (square-list items) (map ⟨??⟩ ⟨??⟩))
> ```

```elixir
defmodule SquareList do
  def square_list([]), do: []
  def square_list([head | tail]), do: [head * head | square_list(tail)]
end

SquareList.square_list([2, 3, 4, 5])
```

```elixir
square_list = fn items ->
  Enum.map(items, fn x -> x * x end)
end

square_list.([2, 3, 4, 5])
```
